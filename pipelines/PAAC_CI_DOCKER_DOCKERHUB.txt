pipeline {
    agent any

    tools {
        maven "MAVEN3.9"
        jdk "JDK17"
    }

    environment {
        // --- Docker Hub settings ---
        DOCKERHUB_CREDENTIALS = 'dockerhub-creds'   // Jenkins Credentials ID (Username with password)
        DOCKERHUB_REGISTRY    = 'https://index.docker.io/v1/' // Docker Hub registry endpoint
        DOCKERHUB_REPO        = 'rvbasulto/vprofileappimg'    // <namespace>/<repo> on Docker Hub

        // --- SonarQube scanner tool name in Jenkins (unchanged) ---
        scannerHome = tool 'sonar6.2'
    }

    stages {

        stage('Fetch code') {
            steps {
                // Pull the code from the docker branch
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        stage('Build') {
            steps {
                // Build the application without running tests
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo 'Now Archiving it...'
                    archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

        stage('UNIT TEST') {
            steps {
                // Run unit tests
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                // Generate Checkstyle report
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('Sonar Code Analysis') {
            steps {
                // Execute Sonar scan (server configured in Jenkins as 'sonarserver')
                withSonarQubeEnv('sonarserver') {
                    sh '''
                    ${scannerHome}/bin/sonar-scanner \
                      -Dsonar.projectKey=vprofile \
                      -Dsonar.projectName=vprofile \
                      -Dsonar.projectVersion=1.0 \
                      -Dsonar.sources=src/ \
                      -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                      -Dsonar.junit.reportsPath=target/surefire-reports/ \
                      -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                      -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube quality gate result (fail pipeline if gate fails)
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false
                }
            }
        }

        stage('Build App Image') {
            steps {
                script {
                    // Build Docker image tagged with build number
                    // NOTE: The tag must include the Docker Hub repo (namespace/repo:tag)
                    dockerImage = docker.build("${DOCKERHUB_REPO}:${BUILD_NUMBER}", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script {
                    // Login to Docker Hub and push both tags (build number and latest)
                    docker.withRegistry(DOCKERHUB_REGISTRY, DOCKERHUB_CREDENTIALS) {
                        dockerImage.push("${BUILD_NUMBER}") // Push versioned tag
                        // Also tag and push 'latest' for convenience
                        sh "docker tag ${DOCKERHUB_REPO}:${BUILD_NUMBER} ${DOCKERHUB_REPO}:latest"
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }

    post {
        always {
            // Optional cleanup to avoid disk bloat in long-lived agents
            sh '''
              echo "Cleaning dangling images..."
              docker image prune -f || true
            '''
        }
    }
}
